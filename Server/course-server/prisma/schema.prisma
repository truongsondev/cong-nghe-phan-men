generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  full_name String?
  role      Role
  bio       String?
  otp       String?
  otp_expiry  DateTime?
  otp_verified Boolean? @default(false)
  otp_attempts Int     @default(0)
  user_verified Boolean   @default(false)
  createdAt DateTime @default(now())

  courses        Course[]       @relation("InstructorCourses")
  enrollments    Enrollment[]
  reviews        Review[]
  courseProgress CourseProgress[]
  courseNotes    CourseNote[]
  sentMessages   ChatMessage[]  @relation("SentMessages")
  receivedMsgs   ChatMessage[]  @relation("ReceivedMessages")
  instructorMsgs InstructorMsg[] @relation("InstructorMsgs")
  studentMsgs    InstructorMsg[] @relation("StudentMsgs")

  @@map("users")
}

enum Role {
  student
  instructor
  admin
  guest
  reviewer

  @@map("roles")
}

model Category {
  id          String  @id @default(cuid())
  name        String  @unique

  courses Course[]

  @@map("categories")
}

model Course {
  id          String   @id @default(cuid())
  title       String
  description String   @db.Text
  instructor  User     @relation("InstructorCourses", fields: [instructorId], references: [id])
  instructorId String
  thumbnailUrl   String  @db.Text 
  videoUrl   String  @db.Text 
  requirements CourseRequirement[]
  status     String  @default("draft")
  category    Category? @relation(fields: [categoryId], references: [id])
  categoryId  String?
  price       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  enrollments    Enrollment[]
  reviews        Review[]
  sessions       Session[]
  courseProgress CourseProgress[]
  courseNotes    CourseNote[]

  @@map("courses")
}

model CourseRequirement {
  id       String    @id @default(cuid())
  text     String
  courseId String
  course   Course @relation(fields: [courseId], references: [id])
}

model Enrollment {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  course     Course   @relation(fields: [courseId], references: [id])
  courseId   String
  enrolledAt DateTime @default(now())
  status     String   @default("pending") 
  @@map("enrollments")
}

model Review {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reviews")
}

model Session {
  id        String   @id @default(cuid())
  title     String
  position  Int
  lessons   Lesson[]  
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id])
  createdAt DateTime @default(now())
  expiresAt DateTime @updatedAt

  @@map("sessions")
}

model Lesson {
  id        String   @id @default(cuid())
  session    Session   @relation(fields: [sessionId], references: [id])
  sessionId  String
  title     String
  videoUrl   String?  @db.Text 
  docUrl     String?  @db.Text 
  position  Int
  lessionStatus Boolean @default(false)
  duration  Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  courseProgress CourseProgress[]

  @@map("lessons")
}

model CourseProgress {
  id                 String   @id @default(cuid())
  user               User     @relation(fields: [userId], references: [id])
  userId             String
  course             Course   @relation(fields: [courseId], references: [id])
  courseId           String
  lastLesson         Lesson?  @relation(fields: [lastLessonId], references: [id])
  lastLessonId       String?
  progressPercentage Decimal  @db.Decimal(5, 2) @default(0)
  updatedAt          DateTime @default(now())

  @@map("course_progress")
}

model CourseNote {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  String
  note      String
  createdAt DateTime @default(now())

  @@map("course_notes")
}

model ChatMessage {
  id        String   @id @default(cuid())
  sender    User     @relation("SentMessages", fields: [senderId], references: [id])
  senderId  String
  receiver  User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId String
  message   String
  sentAt    DateTime @default(now())

  @@map("chat_messages")
}

model InstructorMsg {
  id           String   @id @default(cuid())
  instructor   User     @relation("InstructorMsgs", fields: [instructorId], references: [id])
  instructorId String
  student      User     @relation("StudentMsgs", fields: [studentId], references: [id])
  studentId    String
  message      String
  sentAt       DateTime @default(now())

  @@map("instructor_msgs")
}
