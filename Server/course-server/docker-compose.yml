version: '3.8'

services:
  # =====================
  # Zookeeper (Kafka cáº§n)
  # =====================
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    ports:
      - '2181:2181'
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - course_network

  # ============
  # Kafka Broker
  # ============
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    ports:
      - '9092:9092'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    networks:
      - course_network

  # ============
  # MySQL Server
  # ============
  mysql:
    image: mysql:8.0
    container_name: course-db
    restart: always
    ports:
      - '3306:3306'
    environment:
      MYSQL_ROOT_PASSWORD: admin123
      MYSQL_DATABASE: course_db
      MYSQL_USER: sonlt
      MYSQL_PASSWORD: ltson212
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - course_network

  # ============
  # Redis Server
  # ============
  redis:
    image: redis:7
    container_name: course-redis
    restart: always
    ports:
      - '6379:6379'
    command: ['redis-server', '--appendonly', 'yes']
    volumes:
      - redis_data:/data
    networks:
      - course_network

  # ============
  # Kafka UI Web
  # ============
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - '8080:8080'
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    depends_on:
      - kafka
      - zookeeper
    networks:
      - course_network

  # ============
  # MinIO Server
  # ============
  minio:
    image: quay.io/minio/minio:latest
    container_name: course-minio
    restart: always
    ports:
      - '9000:9000'
      - '9001:9001'
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    networks:
      - course_network

  # ============
  # Elasticsearch
  # ============
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.15.0
    container_name: course-elasticsearch
    restart: always
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    ports:
      - '9200:9200'
      - '9300:9300'
    volumes:
      - elastic_data:/usr/share/elasticsearch/data
    networks:
      - course_network

  # ============
  # Kibana
  # ============
  kibana:
    image: docker.elastic.co/kibana/kibana:8.15.0
    container_name: course-kibana
    restart: always
    ports:
      - '5601:5601'
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - course_network

# ======================
# Volumes & Networks
# ======================
volumes:
  mysql_data:
  redis_data:
  minio_data:
  elastic_data:

networks:
  course_network:
    driver: bridge
